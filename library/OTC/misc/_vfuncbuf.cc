/*
// ============================================================================
//
// = LIBRARY
//     OTC
// 
// = FILENAME
//     misc/_vfuncbuf.cc
//
// = AUTHOR(S)
//     Graham Dumpleton
// 
// = COPYRIGHT
//     Copyright 1997-2003 DUMPLETON SOFTWARE CONSULTING PTY LIMITED
//
// ============================================================================
*/

#include <OTC/misc/vfuncbuf.hh>

#include <OTC/stdlib/iostream.h>

#include <stdlib.h>

/* ------------------------------------------------------------------------- */

class TST_VFuncBuf : public OTC_VFuncBuf
{
  public:

			TST_VFuncBuf(char* theBuffer, size_t theSize)
			  : OTC_VFuncBuf(theBuffer,theSize) {}

			TST_VFuncBuf(OTC_BufferingFlag theType)
			  : OTC_VFuncBuf(theType) {}

			~TST_VFuncBuf() {}

  protected:

    void		handle(char const* theString, size_t theLength);
};

void TST_VFuncBuf::handle(char const* theBuffer, size_t theSize)
{
  cerr << "(";
  cerr.write(theBuffer,theSize);
  cerr << ")";
}

void test1()
{
  char buf[128];
  TST_VFuncBuf sbuf(buf,sizeof(buf));
  ostream out(&sbuf);

  out << "message 1" << endl;
  out << "message 2" << "\n";
  out << "message 3" << endl;
  out << "message 4" << endl;
  out << "message 5" << flush;
  out << "message 6" << endl;
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";

  sbuf.pubsync();
}

void test2()
{
  TST_VFuncBuf sbuf(OTCLIB_UNBUFFERED);
  ostream out(&sbuf);

  out << "message 1" << endl;
  out << "message 2" << "\n";
  out << "message 3" << endl;
  out << "message 4" << endl;
  out << "message 5" << flush;
  out << "message 6" << endl;
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";

  sbuf.pubsync();
}

void test3()
{
  TST_VFuncBuf sbuf(OTCLIB_BUFFERED);
  ostream out(&sbuf);

  out << "message 1" << endl;
  out << "message 2" << "\n";
  out << "message 3" << endl;
  out << "message 4" << endl;
  out << "message 5" << flush;
  out << "message 6" << endl;
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";
  out << "123456789012345678901234567890123456789012345678901234567890";

  sbuf.pubsync();
}

typedef void (*testFunc)();

testFunc tests[] =
{
  test1,
  test2,
  test3
};

/* ------------------------------------------------------------------------- */

int main(int argc, char* argv[])
{
  u_int const numTests = sizeof(tests)/sizeof(tests[0]);

  if (argc != 2)
  {
    cout << numTests << endl;
    return 1;
  }
  else
  {
    int testNum = atoi(argv[1]);
    if (testNum > 0 && u_int(testNum) <= numTests)
    {
      tests[testNum-1]();
      return 0;
    }
    else
      return 1;
  }
}

/* ------------------------------------------------------------------------- */
